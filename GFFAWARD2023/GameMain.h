#pragma once
#include "AbstractScene.h"
#define _USE_MATH_DEFINES
#include <math.h>
#include"stdlib.h"

#define MAP_HIGHT 20
#define MAP_WIDTH 103

#define DRAW_MAP_HIGHT 20
#define DRAW_MAP_WIDTH 35

#define BLOCK_WIDTH 30

class GameMain :
    public AbstractScene
{
private:
    int g_block_image[12];
    int g_item_image[2];
    int g_player_image[4];
    int g_cursor_image;
    int g_white_image;
    //int g_jump_image;
    int g_haikei_image;

    int g_map_i; //
    int g_map_j;

    int g_block_quantity = 20;//ブロック個数

    int g_stage_count = 0;

    int g_player_hit_lowerbody_front = 0; //プレイヤーが当たった障害物
    int g_player_hit_upperbody_front = 0;
    int g_player_hit_lowerbody_back = 0; //プレイヤーが当たった障害物
    int g_player_hit_upperbody_back = 0;

    int g_player_hit_under_back = 1;
    int g_player_hit_under_front = 1;

    int g_uicursorx = 0;
    bool g_uicursor = FALSE;
    bool g_stage_scroll = FALSE;
    int g_stage_x = 0;

    int g_cursorx = 7;
    int g_cursory = 15;
    int g_cursor_speed = 0;
    int g_old_key = 0;
    int g_now_key = 0;

    bool g_AKey = FALSE;
    bool g_direction = false; //false = 右向き　true = 左向き
    int g_playerx = 1 * 30;
    int g_playery = 7 * 30;

    int g_player_speed = 1;

    int g_player_angle = 0;

    int g_player_image_type = 0;
    int g_image_time = 0;

    int g_jump = 0;

    int g_jump_centerx;
    int g_jump_centery;
    int g_jump_angle = 0;

    int g_playerx_radius = 30 / 2;
    int g_playery_radius = 60 / 2;

    int g_EnemyImage[4];

    int g_enemy_hit_lowerbody_front = 0; //プレイヤーが当たった障害物
    int g_enemy_hit_upperbody_front = 0;
    int g_enemy_hit_lowerbody_back = 0; //プレイヤーが当たった障害物
    int g_enemy_hit_upperbody_back = 0;
    int g_enemy_hit_under_back = 1;
    int g_enemy_hit_under_front = 1;
    bool g_Edirection = true; //false = 右向き　true = 左向き
    int g_enemy_image[4];
    int g_enemyx = 24 * 30;
    int g_enemyy = 16 * 30;
    int g_enemy_hight = 60;
    int g_enemy_width = 30;
    int g_enemy_speed = 1;
    int g_enemy_angle = 0;
    int g_enemy_image_type = 0;
    int g_enemyx_radius = 30 / 2;
    int g_enemyy_radius = 60 / 2;
    int g_enemy_time = 0;
    bool g_forcedtermination; //強制終了
    unsigned int MAP_DATA_INIT[MAP_HIGHT][MAP_WIDTH] = {
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,7,1,5,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {2,0,0,0,0,0,0,2,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {1,0,0,0,0,0,11,3,1,0,0,0,11,0,9 ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {7,8,2,6,6,2,1,5,5,2,2,4,4,8,8,6,6,2,8,2,6,6,2,6,2,8,8,2,2,6,6,2,4,4,2,2,6,6,8,8,6,2,3,2,4,4,6,8,8,8,6,6,6,3,3,3,2,2,2,8,8,8,8,6,3,3,2,2,3,6,6,6,8,8,2,6,4,4,2,2,4,2,5,5,8,8,7,7,1,1,5,3,3,1,1,7,7,3,1,5,1,3,7},
            {1,3,5,7,3,5,7,1,5,7,5,1,1,5,7,7,3,3,1,1,3,1,3,7,7,5,5,1,1,3,7,7,5,5,1,1,3,3,1,1,7,3,7,1,1,3,5,3,5,5,7,7,1,1,5,7,3,1,3,1,7,3,1,7,3,1,5,5,7,7,1,1,5,3,3,1,1,7,7,3,1,5,1,3,7,1,7,7,1,1,5,3,3,1,1,7,7,3,1,5,1,3,7},
    };
    unsigned int PLAYER_MAP[MAP_HIGHT][MAP_WIDTH];
    unsigned int ENEMY_MAP[MAP_HIGHT][MAP_WIDTH];
    unsigned int MAP_DATA[MAP_HIGHT][MAP_WIDTH];

public:
    //コンストラクタ
    GameMain();
    //デストラクタ
    ~GameMain() {}
    //描画以外の更新を実行
    AbstractScene* Update() override;
    //描画に関することを実装
    void Draw() const override;

    void Init();


    void Player();  //自機操作
    void PlayerDraw()const;
    void Stage()const;  //ステージ
    void Scroll(void);
    void  UI(void)const; //UI
    void Enemy(); //敵
    void EnemyDraw()const;
    void Sousa(void); // 操作
    void Jump(void); //ジャンプ
    void Walk(void);

    int HitBoxPlayer();
};
